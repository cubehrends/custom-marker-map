<?php
/* CPT for Markers
=============================================================== */
function cmm_register_post_type() {
	$labels = array(
		'name' => esc_attr__( 'Marker', 'cmm' ),
		'singular_name' => esc_attr__( 'Marker', 'cmm' ),
		'add_new' => esc_attr__( 'Erstellen', 'cmm' ),
		'all_items' => esc_attr__( 'Alle Marker', 'cmm' ),
		'add_new_item' => esc_attr__( 'Marker erstellen', 'cmm' ),
		'edit_item' => esc_attr__( 'Marker bearbeiten', 'cmm' ),
		'new_item' => esc_attr__( 'Neuer Marker', 'cmm' ),
		'view_item' => esc_attr__( 'Zeige Marker', 'cmm' ),
		'search_item' => esc_attr__( 'Suche Marker', 'cmm' ),
		'not_found' => esc_attr__( 'Keine übereinstimmenden Marker.', 'cmm' ),
		'not_found_in_trash' => esc_attr__( 'Keine Marker im Papierkorb.', 'cmm' ),
		'parent_item_colon' => esc_attr__( 'Übergeordnete Marker', 'cmm' )
	);
	$args = array(
		'labels' => $labels,
		'description' => esc_attr__( 'Marker für die Customer Journey ', 'cmm' ),
		'public' => true,
		'menu_position' => 10,
		'menu_icon' => 'dashicons-location',
		'supports' => array(
			'title',
			'editor',
			'thumbnail',
		)
	);
	register_post_type( 'marker', $args );

}
add_action( 'init', 'cmm_register_post_type' );
/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class Rational_Meta_Box {
	private $screens = array(
		'marker',
	);
	private $fields = array(
		array(
			'id' => 'x',
			'label' => 'X Position',
			'type' => 'number',
		),
		array(
			'id' => 'y',
			'label' => 'Y Position',
			'type' => 'number',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'map-coordinates',
				__( 'Koordinaten', 'tld' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'advanced',
				'default'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 *
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'map_coordinates_data', 'map_coordinates_nonce' );
		echo 'Gib hier die Positionen an, an denen der Marker auf der Customer Journey erscheinen soll';
		$this->generate_fields( $post );
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
			$db_value = get_post_meta( $post->ID, 'map_coordinates_' . $field['id'], true );
			switch ( $field['type'] ) {
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['map_coordinates_nonce'] ) )
			return $post_id;

		$nonce = $_POST['map_coordinates_nonce'];
		if ( !wp_verify_nonce( $nonce, 'map_coordinates_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'map_coordinates_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'map_coordinates_' . $field['id'], '0' );
			}
		}
	}
}
new Rational_Meta_Box;

/* Shortcode to Display Markers
=============================================================== */
function cmm_markers_shortcode( $atts, $content = null ) {
	$args = array( 'post_type' => 'marker',
	 	'posts_per_page' => -1,
		'post_status' => 'publish',
		'suppress_filters' => true
	);
	$markers = new WP_Query( $args );

	$html = '';
	if ( $markers->have_posts() ) {
		while ( $markers->have_posts() ) {
			$markers->the_post();
			$x = get_post_meta( get_the_ID(), 'map_coordinates_x', true );
			$y = get_post_meta( get_the_ID(), 'map_coordinates_y', true );
			$html .= '<img class="marker" data-title="'.get_the_title().'" data-content="'.get_the_content().'" src="'.get_the_post_thumbnail_url().'" style="position: absolute; top: '.$y.'px; left: '.$x.'px;">';
		}
	}

	wp_reset_postdata();
	return $html;
}
add_shortcode( 'cmm_markers', 'cmm_markers_shortcode' );
